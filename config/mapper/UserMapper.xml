<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace:命名空间，就是对sql进行分类化管理，理解sql隔离 注意：使用mapper代理方法，namespace有特殊重要的作用 -->
<mapper namespace="cjs.mapper.UserMapper">
	<!-- 在映射文件中配置sql语句 -->
	<!-- 需求：通过id查询用户表的记录 -->
	<!-- 通过select执行数据库查询：id标识映射文件中的 id 将sql语句封装到mappedStatement对象中，所以id称为statement的id 
		parameterType：指定输入参数的类型 #{}标识占位符 #{id}其中id表示接收输入的参数，如果输入参数是简单类型，#{ }中的参数可以任意可以value和其他名称 
		resultType：指定sql输出结果所映射的java对象，select指定resultType表示将单条记录映射成的java对象 -->
	<!-- 根据用户id查询 -->
	<select id="findUserById" parameterType="int"
		resultType="cjs.entity.User">
		select * from tb_user where id = #{id}
	</select>

	<!-- 模糊查询 -->
	<!-- ${}:表示拼接sql串将接收到的内容不加任何修饰拼接在sql中 使${}拼接sql，引起sql注入 ${value}：接收输入参数的内容，如果传入的简单类型，${}中只能使用value -->
	<select id="findUserByName" parameterType="java.lang.String"
		resultType="cjs.entity.User">
		select * from tb_user where name like '%${value}%'
	</select>

	<!-- 添加用户 parameterType类型是对象 #{}中指定对象的属性名 -->
	<insert id="insertUser" parameterType="cjs.entity.User">
		<!-- 将刚刚插入的主键返回，返回到user对象中 select LAST_INSERT_ID()：得到刚刚insert进去记录的主键 -->
		<selectKey keyProperty="id" order="AFTER"
			resultType="java.lang.Integer">
			select LAST_INSERT_ID()
		</selectKey>
		insert into tb_user(name,age) value(#{name},#{age})
	</insert>

	<!-- 删除用户 -->
	
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from tb_user where id = #{id}
	</delete>	

	<!--更新用户 -->
	<update id="updateUser" parameterType="cjs.entity.User">
		update tb_user set name = #{name},age = #{age} where id = #{id}
	</update>
</mapper>